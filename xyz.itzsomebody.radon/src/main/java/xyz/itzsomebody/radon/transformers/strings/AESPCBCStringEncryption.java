package xyz.itzsomebody.radon.transformers.strings;

import org.objectweb.asm.FieldVisitor;
import org.objectweb.asm.Label;
import org.objectweb.asm.MethodVisitor;
import org.objectweb.asm.Opcodes;
import org.objectweb.asm.tree.ClassNode;
import org.objectweb.asm.tree.InsnList;
import org.objectweb.asm.tree.LdcInsnNode;
import xyz.itzsomebody.codegen.WrappedType;
import xyz.itzsomebody.commons.InsnListModifier;
import xyz.itzsomebody.radon.transformers.Transformers;
import xyz.itzsomebody.radon.utils.RandomUtils;
import xyz.itzsomebody.radon.utils.asm.ClassWrapper;
import xyz.itzsomebody.radon.utils.asm.MethodWrapper;
import xyz.itzsomebody.radon.utils.logging.RadonLogger;

import java.util.List;
import java.util.concurrent.atomic.AtomicInteger;

import static xyz.itzsomebody.codegen.expressions.IRExpressions.*;
import static xyz.itzsomebody.codegen.expressions.IRExpressions.longConst;

/**
 * I made this transformer as a project for my cryptography class.
 * This is an implementation of AES in the PCBC mode with 128 bit keys from (mostly) scratch.
 * <p>
 * For AES read <a href="https://nvlpubs.nist.gov/nistpubs/fips/nist.fips.197.pdf">this</a>
 * </p>
 * <p>
 * For PCBC read <a href="https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation#Propagating_cipher_block_chaining_(PCBC)">this</a>
 * </p>
 * @author ItzSomebody
 */
public class AESPCBCStringEncryption extends StringTransformer {
    @Override
    public void transform() {
        var stringsEncrypted = new AtomicInteger();
        var memberNames = new DecryptionMemberNames();

        classStream().filter(this::notExcluded).forEach(cw -> {
            cw.methodStream().filter(mw -> notExcluded(mw) && mw.hasInstructions()).forEach(mw -> {
                if (mw.getLeewaySize() <= allowedLeeway) {
                    return;
                }

                var methodNode = mw.getMethodNode();
                var modifier = new InsnListModifier();

                methodNode.instructions.forEach(ain -> {
                    if (ain instanceof LdcInsnNode && ((LdcInsnNode) ain).cst instanceof String) {
                        String str = (String) ((LdcInsnNode) ain).cst;
                        modifier.replace(ain, generateInsnBlock(str, cw, mw, memberNames));
                        stringsEncrypted.incrementAndGet();
                    }
                });

                modifier.apply(methodNode);
            });
        });

        if (stringsEncrypted.get() > 0) {
            addClass(generateDecryptionClass(memberNames));
            RadonLogger.info("Encrypted " + stringsEncrypted.get() + " strings");
        }
    }

    @Override
    public String getConfigName() {
        return Transformers.AES_PCBC_STRING_ENCRYPTION.getConfigName();
    }

    private InsnList generateInsnBlock(String str, ClassWrapper cw, MethodWrapper mw, DecryptionMemberNames memberNames) {
        int[] key = {
                memberNames.decryptorClassName.replace('/','.').hashCode(),
                memberNames.decryptMethodName.hashCode(),
                cw.getName().replace('/','.').hashCode(),
                mw.getMethodNode().name.replace('/','.').hashCode(),
        };
        long[] ivInts = {
                RandomUtils.randomLong(),
                RandomUtils.randomLong()
        };

        return invokeStatic(
                WrappedType.fromInternalName(memberNames.decryptorClassName, false), // Owner
                memberNames.decryptMethodName, // Method name
                List.of(
                        stringConst(AESPCBCEncryptor.encrypt(str, key, ivInts)),
                        newArray(long.class, longConst(ivInts[0]), longConst(ivInts[1]))
                ), // Args
                List.of(
                        WrappedType.from(String.class),
                        WrappedType.from(long[].class)
                ), // Arg types
                WrappedType.from(String.class) // Return type
        ).getInstructions().compile();
    }

    private class DecryptionMemberNames {
        // Class name
        private String decryptorClassName = fakeSubClass();

        // Field names
        private String sboxFieldName = dictionary.next();
        private String invSBoxFieldName = dictionary.next();
        private String rconFieldName = dictionary.next();
        private String expandedKeyFieldName = dictionary.next();
        private String mcTablesFieldName = dictionary.next();

        // Method names
        private String subWordMethodName = dictionary.next();
        private String keyScheduleMethodName = dictionary.next();
        private String addRoundKeyMethodName = dictionary.next();
        private String invShiftRowsMethodName = dictionary.next();
        private String invSubBytesMethodName = dictionary.next();
        private String gfMultMethodName = dictionary.next();
        private String invMixColumnsMethodName = dictionary.next();
        private String invCipherMethodName = dictionary.next();
        private String decryptMethodName = dictionary.next();
        private String copyBlockMethodName = dictionary.next();
        private String designMethodName = dictionary.next();
        private String resignMethodName = dictionary.next();
        private String createStateMethodName = dictionary.next();
    }

    private ClassNode generateDecryptionClass(DecryptionMemberNames memberNames) {
        ClassNode classWriter = new ClassNode();
        FieldVisitor fieldVisitor;
        MethodVisitor methodVisitor;

        classWriter.visit(Opcodes.V11, ACC_PUBLIC | ACC_SUPER, memberNames.decryptorClassName, null, "java/lang/Object", null);

        classWriter.visitInnerClass("java/util/Base64$Decoder", "java/util/Base64", "Decoder", ACC_PUBLIC | ACC_STATIC);

        {
            fieldVisitor = classWriter.visitField(ACC_PUBLIC | ACC_STATIC, memberNames.sboxFieldName, "[[I", null, null);
            fieldVisitor.visitEnd();
        }
        {
            fieldVisitor = classWriter.visitField(ACC_PUBLIC | ACC_STATIC, memberNames.invSBoxFieldName, "[[I", null, null);
            fieldVisitor.visitEnd();
        }
        {
            fieldVisitor = classWriter.visitField(ACC_PUBLIC | ACC_STATIC, memberNames.rconFieldName, "[I", null, null);
            fieldVisitor.visitEnd();
        }
        {
            fieldVisitor = classWriter.visitField(ACC_PUBLIC | ACC_STATIC, memberNames.expandedKeyFieldName, "[I", null, null);
            fieldVisitor.visitEnd();
        }
        {
            fieldVisitor = classWriter.visitField(ACC_PUBLIC | ACC_STATIC, memberNames.mcTablesFieldName, "[[I", null, null);
            fieldVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(ACC_PUBLIC, "<init>", "()V", null, null);
            methodVisitor.visitCode();
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/Object", "<init>", "()V", false);
            methodVisitor.visitInsn(RETURN);
            methodVisitor.visitMaxs(1, 1);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(ACC_PUBLIC | ACC_STATIC, memberNames.subWordMethodName, "(I)I", null, null);
            methodVisitor.visitCode();
            methodVisitor.visitVarInsn(ILOAD, 0);
            methodVisitor.visitIntInsn(BIPUSH, 24);
            methodVisitor.visitInsn(ISHR);
            methodVisitor.visitIntInsn(SIPUSH, 255);
            methodVisitor.visitInsn(IAND);
            methodVisitor.visitVarInsn(ISTORE, 1);
            methodVisitor.visitVarInsn(ILOAD, 0);
            methodVisitor.visitIntInsn(BIPUSH, 16);
            methodVisitor.visitInsn(ISHR);
            methodVisitor.visitIntInsn(SIPUSH, 255);
            methodVisitor.visitInsn(IAND);
            methodVisitor.visitVarInsn(ISTORE, 2);
            methodVisitor.visitVarInsn(ILOAD, 0);
            methodVisitor.visitIntInsn(BIPUSH, 8);
            methodVisitor.visitInsn(ISHR);
            methodVisitor.visitIntInsn(SIPUSH, 255);
            methodVisitor.visitInsn(IAND);
            methodVisitor.visitVarInsn(ISTORE, 3);
            methodVisitor.visitVarInsn(ILOAD, 0);
            methodVisitor.visitIntInsn(SIPUSH, 255);
            methodVisitor.visitInsn(IAND);
            methodVisitor.visitVarInsn(ISTORE, 4);
            methodVisitor.visitFieldInsn(GETSTATIC, memberNames.decryptorClassName, memberNames.sboxFieldName, "[[I");
            methodVisitor.visitVarInsn(ILOAD, 1);
            methodVisitor.visitInsn(ICONST_4);
            methodVisitor.visitInsn(ISHR);
            methodVisitor.visitInsn(AALOAD);
            methodVisitor.visitVarInsn(ILOAD, 1);
            methodVisitor.visitIntInsn(BIPUSH, 15);
            methodVisitor.visitInsn(IAND);
            methodVisitor.visitInsn(IALOAD);
            methodVisitor.visitIntInsn(BIPUSH, 24);
            methodVisitor.visitInsn(ISHL);
            methodVisitor.visitFieldInsn(GETSTATIC, memberNames.decryptorClassName, memberNames.sboxFieldName, "[[I");
            methodVisitor.visitVarInsn(ILOAD, 2);
            methodVisitor.visitInsn(ICONST_4);
            methodVisitor.visitInsn(ISHR);
            methodVisitor.visitInsn(AALOAD);
            methodVisitor.visitVarInsn(ILOAD, 2);
            methodVisitor.visitIntInsn(BIPUSH, 15);
            methodVisitor.visitInsn(IAND);
            methodVisitor.visitInsn(IALOAD);
            methodVisitor.visitIntInsn(BIPUSH, 16);
            methodVisitor.visitInsn(ISHL);
            methodVisitor.visitInsn(IOR);
            methodVisitor.visitFieldInsn(GETSTATIC, memberNames.decryptorClassName, memberNames.sboxFieldName, "[[I");
            methodVisitor.visitVarInsn(ILOAD, 3);
            methodVisitor.visitInsn(ICONST_4);
            methodVisitor.visitInsn(ISHR);
            methodVisitor.visitInsn(AALOAD);
            methodVisitor.visitVarInsn(ILOAD, 3);
            methodVisitor.visitIntInsn(BIPUSH, 15);
            methodVisitor.visitInsn(IAND);
            methodVisitor.visitInsn(IALOAD);
            methodVisitor.visitIntInsn(BIPUSH, 8);
            methodVisitor.visitInsn(ISHL);
            methodVisitor.visitInsn(IOR);
            methodVisitor.visitFieldInsn(GETSTATIC, memberNames.decryptorClassName, memberNames.sboxFieldName, "[[I");
            methodVisitor.visitVarInsn(ILOAD, 4);
            methodVisitor.visitInsn(ICONST_4);
            methodVisitor.visitInsn(ISHR);
            methodVisitor.visitInsn(AALOAD);
            methodVisitor.visitVarInsn(ILOAD, 4);
            methodVisitor.visitIntInsn(BIPUSH, 15);
            methodVisitor.visitInsn(IAND);
            methodVisitor.visitInsn(IALOAD);
            methodVisitor.visitInsn(IOR);
            methodVisitor.visitInsn(IRETURN);
            methodVisitor.visitMaxs(4, 5);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(ACC_PUBLIC | ACC_STATIC, memberNames.keyScheduleMethodName, "([I)V", null, null);
            methodVisitor.visitCode();
            methodVisitor.visitIntInsn(BIPUSH, 11);
            methodVisitor.visitVarInsn(ISTORE, 1);
            methodVisitor.visitInsn(ICONST_4);
            methodVisitor.visitVarInsn(ILOAD, 1);
            methodVisitor.visitInsn(IMUL);
            methodVisitor.visitIntInsn(NEWARRAY, T_INT);
            methodVisitor.visitFieldInsn(PUTSTATIC, memberNames.decryptorClassName, memberNames.expandedKeyFieldName, "[I");
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitVarInsn(ISTORE, 2);
            Label label0 = new Label();
            methodVisitor.visitLabel(label0);
            methodVisitor.visitVarInsn(ILOAD, 2);
            methodVisitor.visitFieldInsn(GETSTATIC, memberNames.decryptorClassName, memberNames.expandedKeyFieldName, "[I");
            methodVisitor.visitInsn(ARRAYLENGTH);
            Label label1 = new Label();
            methodVisitor.visitJumpInsn(IF_ICMPGE, label1);
            methodVisitor.visitVarInsn(ILOAD, 2);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitInsn(ARRAYLENGTH);
            Label label2 = new Label();
            methodVisitor.visitJumpInsn(IF_ICMPGE, label2);
            methodVisitor.visitFieldInsn(GETSTATIC, memberNames.decryptorClassName, memberNames.expandedKeyFieldName, "[I");
            methodVisitor.visitVarInsn(ILOAD, 2);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitVarInsn(ILOAD, 2);
            methodVisitor.visitInsn(IALOAD);
            methodVisitor.visitInsn(IASTORE);
            Label label3 = new Label();
            methodVisitor.visitJumpInsn(GOTO, label3);
            methodVisitor.visitLabel(label2);
            methodVisitor.visitVarInsn(ILOAD, 2);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitInsn(ARRAYLENGTH);
            methodVisitor.visitInsn(IREM);
            Label label4 = new Label();
            methodVisitor.visitJumpInsn(IFNE, label4);
            methodVisitor.visitFieldInsn(GETSTATIC, memberNames.decryptorClassName, memberNames.expandedKeyFieldName, "[I");
            methodVisitor.visitVarInsn(ILOAD, 2);
            methodVisitor.visitInsn(ICONST_1);
            methodVisitor.visitInsn(ISUB);
            methodVisitor.visitInsn(IALOAD);
            methodVisitor.visitIntInsn(BIPUSH, 8);
            methodVisitor.visitInsn(ISHL);
            methodVisitor.visitFieldInsn(GETSTATIC, memberNames.decryptorClassName, memberNames.expandedKeyFieldName, "[I");
            methodVisitor.visitVarInsn(ILOAD, 2);
            methodVisitor.visitInsn(ICONST_1);
            methodVisitor.visitInsn(ISUB);
            methodVisitor.visitInsn(IALOAD);
            methodVisitor.visitIntInsn(BIPUSH, 24);
            methodVisitor.visitInsn(IUSHR);
            methodVisitor.visitInsn(IOR);
            methodVisitor.visitVarInsn(ISTORE, 3);
            methodVisitor.visitFieldInsn(GETSTATIC, memberNames.decryptorClassName, memberNames.expandedKeyFieldName, "[I");
            methodVisitor.visitVarInsn(ILOAD, 2);
            methodVisitor.visitFieldInsn(GETSTATIC, memberNames.decryptorClassName, memberNames.expandedKeyFieldName, "[I");
            methodVisitor.visitVarInsn(ILOAD, 2);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitInsn(ARRAYLENGTH);
            methodVisitor.visitInsn(ISUB);
            methodVisitor.visitInsn(IALOAD);
            methodVisitor.visitInsn(IASTORE);
            methodVisitor.visitFieldInsn(GETSTATIC, memberNames.decryptorClassName, memberNames.expandedKeyFieldName, "[I");
            methodVisitor.visitVarInsn(ILOAD, 2);
            methodVisitor.visitInsn(DUP2);
            methodVisitor.visitInsn(IALOAD);
            methodVisitor.visitVarInsn(ILOAD, 3);
            methodVisitor.visitMethodInsn(INVOKESTATIC, memberNames.decryptorClassName, memberNames.subWordMethodName, "(I)I", false);
            methodVisitor.visitInsn(IXOR);
            methodVisitor.visitInsn(IASTORE);
            methodVisitor.visitFieldInsn(GETSTATIC, memberNames.decryptorClassName, memberNames.expandedKeyFieldName, "[I");
            methodVisitor.visitVarInsn(ILOAD, 2);
            methodVisitor.visitInsn(DUP2);
            methodVisitor.visitInsn(IALOAD);
            methodVisitor.visitFieldInsn(GETSTATIC, memberNames.decryptorClassName, memberNames.rconFieldName, "[I");
            methodVisitor.visitVarInsn(ILOAD, 2);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitInsn(ARRAYLENGTH);
            methodVisitor.visitInsn(IDIV);
            methodVisitor.visitInsn(ICONST_1);
            methodVisitor.visitInsn(ISUB);
            methodVisitor.visitInsn(IALOAD);
            methodVisitor.visitInsn(IXOR);
            methodVisitor.visitInsn(IASTORE);
            methodVisitor.visitJumpInsn(GOTO, label3);
            methodVisitor.visitLabel(label4);
            methodVisitor.visitFieldInsn(GETSTATIC, memberNames.decryptorClassName, memberNames.expandedKeyFieldName, "[I");
            methodVisitor.visitVarInsn(ILOAD, 2);
            methodVisitor.visitFieldInsn(GETSTATIC, memberNames.decryptorClassName, memberNames.expandedKeyFieldName, "[I");
            methodVisitor.visitVarInsn(ILOAD, 2);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitInsn(ARRAYLENGTH);
            methodVisitor.visitInsn(ISUB);
            methodVisitor.visitInsn(IALOAD);
            methodVisitor.visitFieldInsn(GETSTATIC, memberNames.decryptorClassName, memberNames.expandedKeyFieldName, "[I");
            methodVisitor.visitVarInsn(ILOAD, 2);
            methodVisitor.visitInsn(ICONST_1);
            methodVisitor.visitInsn(ISUB);
            methodVisitor.visitInsn(IALOAD);
            methodVisitor.visitInsn(IXOR);
            methodVisitor.visitInsn(IASTORE);
            methodVisitor.visitLabel(label3);
            methodVisitor.visitIincInsn(2, 1);
            methodVisitor.visitJumpInsn(GOTO, label0);
            methodVisitor.visitLabel(label1);
            methodVisitor.visitInsn(RETURN);
            methodVisitor.visitMaxs(6, 4);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(ACC_PUBLIC | ACC_STATIC, memberNames.addRoundKeyMethodName, "([[II)V", null, null);
            methodVisitor.visitCode();
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitVarInsn(ISTORE, 2);
            Label label0 = new Label();
            methodVisitor.visitLabel(label0);
            methodVisitor.visitVarInsn(ILOAD, 2);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitInsn(ARRAYLENGTH);
            Label label1 = new Label();
            methodVisitor.visitJumpInsn(IF_ICMPGE, label1);
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitVarInsn(ISTORE, 3);
            Label label2 = new Label();
            methodVisitor.visitLabel(label2);
            methodVisitor.visitVarInsn(ILOAD, 3);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitInsn(AALOAD);
            methodVisitor.visitInsn(ARRAYLENGTH);
            Label label3 = new Label();
            methodVisitor.visitJumpInsn(IF_ICMPGE, label3);
            methodVisitor.visitFieldInsn(GETSTATIC, memberNames.decryptorClassName, memberNames.expandedKeyFieldName, "[I");
            methodVisitor.visitVarInsn(ILOAD, 1);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitInsn(AALOAD);
            methodVisitor.visitInsn(ARRAYLENGTH);
            methodVisitor.visitInsn(IMUL);
            methodVisitor.visitVarInsn(ILOAD, 3);
            methodVisitor.visitInsn(IADD);
            methodVisitor.visitInsn(IALOAD);
            methodVisitor.visitVarInsn(ISTORE, 4);
            methodVisitor.visitVarInsn(ILOAD, 4);
            methodVisitor.visitIntInsn(BIPUSH, 8);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitInsn(ARRAYLENGTH);
            methodVisitor.visitInsn(ICONST_1);
            methodVisitor.visitInsn(ISUB);
            methodVisitor.visitInsn(IMUL);
            methodVisitor.visitIntInsn(BIPUSH, 8);
            methodVisitor.visitVarInsn(ILOAD, 2);
            methodVisitor.visitInsn(IMUL);
            methodVisitor.visitInsn(ISUB);
            methodVisitor.visitInsn(ISHR);
            methodVisitor.visitIntInsn(SIPUSH, 255);
            methodVisitor.visitInsn(IAND);
            methodVisitor.visitVarInsn(ISTORE, 5);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitVarInsn(ILOAD, 2);
            methodVisitor.visitInsn(AALOAD);
            methodVisitor.visitVarInsn(ILOAD, 3);
            methodVisitor.visitInsn(DUP2);
            methodVisitor.visitInsn(IALOAD);
            methodVisitor.visitVarInsn(ILOAD, 5);
            methodVisitor.visitInsn(IXOR);
            methodVisitor.visitInsn(IASTORE);
            methodVisitor.visitIincInsn(3, 1);
            methodVisitor.visitJumpInsn(GOTO, label2);
            methodVisitor.visitLabel(label3);
            methodVisitor.visitIincInsn(2, 1);
            methodVisitor.visitJumpInsn(GOTO, label0);
            methodVisitor.visitLabel(label1);
            methodVisitor.visitInsn(RETURN);
            methodVisitor.visitMaxs(4, 6);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(ACC_PUBLIC | ACC_STATIC, memberNames.invShiftRowsMethodName, "([[I)V", null, null);
            methodVisitor.visitCode();
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitVarInsn(ISTORE, 1);
            Label label0 = new Label();
            methodVisitor.visitLabel(label0);
            methodVisitor.visitVarInsn(ILOAD, 1);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitInsn(ARRAYLENGTH);
            Label label1 = new Label();
            methodVisitor.visitJumpInsn(IF_ICMPGE, label1);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitVarInsn(ILOAD, 1);
            methodVisitor.visitInsn(AALOAD);
            methodVisitor.visitVarInsn(ASTORE, 2);
            methodVisitor.visitVarInsn(ALOAD, 2);
            methodVisitor.visitInsn(ARRAYLENGTH);
            methodVisitor.visitIntInsn(NEWARRAY, T_INT);
            methodVisitor.visitVarInsn(ASTORE, 3);
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitVarInsn(ISTORE, 4);
            Label label2 = new Label();
            methodVisitor.visitLabel(label2);
            methodVisitor.visitVarInsn(ILOAD, 4);
            methodVisitor.visitVarInsn(ALOAD, 2);
            methodVisitor.visitInsn(ARRAYLENGTH);
            Label label3 = new Label();
            methodVisitor.visitJumpInsn(IF_ICMPGE, label3);
            methodVisitor.visitVarInsn(ALOAD, 3);
            methodVisitor.visitVarInsn(ILOAD, 4);
            methodVisitor.visitVarInsn(ILOAD, 1);
            methodVisitor.visitInsn(IADD);
            methodVisitor.visitInsn(ICONST_4);
            methodVisitor.visitInsn(IREM);
            methodVisitor.visitVarInsn(ALOAD, 2);
            methodVisitor.visitVarInsn(ILOAD, 4);
            methodVisitor.visitInsn(IALOAD);
            methodVisitor.visitInsn(IASTORE);
            methodVisitor.visitIincInsn(4, 1);
            methodVisitor.visitJumpInsn(GOTO, label2);
            methodVisitor.visitLabel(label3);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitVarInsn(ILOAD, 1);
            methodVisitor.visitVarInsn(ALOAD, 3);
            methodVisitor.visitInsn(AASTORE);
            methodVisitor.visitIincInsn(1, 1);
            methodVisitor.visitJumpInsn(GOTO, label0);
            methodVisitor.visitLabel(label1);
            methodVisitor.visitInsn(RETURN);
            methodVisitor.visitMaxs(4, 5);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(ACC_PUBLIC | ACC_STATIC, memberNames.invSubBytesMethodName, "([[I)V", null, null);
            methodVisitor.visitCode();
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitVarInsn(ISTORE, 1);
            Label label0 = new Label();
            methodVisitor.visitLabel(label0);
            methodVisitor.visitVarInsn(ILOAD, 1);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitInsn(ARRAYLENGTH);
            Label label1 = new Label();
            methodVisitor.visitJumpInsn(IF_ICMPGE, label1);
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitVarInsn(ISTORE, 2);
            Label label2 = new Label();
            methodVisitor.visitLabel(label2);
            methodVisitor.visitVarInsn(ILOAD, 2);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitVarInsn(ILOAD, 1);
            methodVisitor.visitInsn(AALOAD);
            methodVisitor.visitInsn(ARRAYLENGTH);
            Label label3 = new Label();
            methodVisitor.visitJumpInsn(IF_ICMPGE, label3);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitVarInsn(ILOAD, 1);
            methodVisitor.visitInsn(AALOAD);
            methodVisitor.visitVarInsn(ILOAD, 2);
            methodVisitor.visitInsn(IALOAD);
            methodVisitor.visitVarInsn(ISTORE, 3);
            methodVisitor.visitVarInsn(ILOAD, 3);
            methodVisitor.visitInsn(ICONST_4);
            methodVisitor.visitInsn(ISHR);
            methodVisitor.visitVarInsn(ISTORE, 4);
            methodVisitor.visitVarInsn(ILOAD, 3);
            methodVisitor.visitIntInsn(BIPUSH, 15);
            methodVisitor.visitInsn(IAND);
            methodVisitor.visitVarInsn(ISTORE, 5);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitVarInsn(ILOAD, 1);
            methodVisitor.visitInsn(AALOAD);
            methodVisitor.visitVarInsn(ILOAD, 2);
            methodVisitor.visitFieldInsn(GETSTATIC, memberNames.decryptorClassName, memberNames.invSBoxFieldName, "[[I");
            methodVisitor.visitVarInsn(ILOAD, 4);
            methodVisitor.visitInsn(AALOAD);
            methodVisitor.visitVarInsn(ILOAD, 5);
            methodVisitor.visitInsn(IALOAD);
            methodVisitor.visitInsn(IASTORE);
            methodVisitor.visitIincInsn(2, 1);
            methodVisitor.visitJumpInsn(GOTO, label2);
            methodVisitor.visitLabel(label3);
            methodVisitor.visitIincInsn(1, 1);
            methodVisitor.visitJumpInsn(GOTO, label0);
            methodVisitor.visitLabel(label1);
            methodVisitor.visitInsn(RETURN);
            methodVisitor.visitMaxs(4, 6);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(ACC_PUBLIC | ACC_STATIC, memberNames.gfMultMethodName, "(II)I", null, null);
            methodVisitor.visitCode();
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitVarInsn(ISTORE, 2);
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitVarInsn(ISTORE, 3);
            Label label0 = new Label();
            methodVisitor.visitLabel(label0);
            methodVisitor.visitVarInsn(ILOAD, 3);
            methodVisitor.visitIntInsn(BIPUSH, 8);
            Label label1 = new Label();
            methodVisitor.visitJumpInsn(IF_ICMPGE, label1);
            methodVisitor.visitVarInsn(ILOAD, 0);
            methodVisitor.visitInsn(ICONST_1);
            methodVisitor.visitInsn(IAND);
            Label label2 = new Label();
            methodVisitor.visitJumpInsn(IFEQ, label2);
            methodVisitor.visitVarInsn(ILOAD, 2);
            methodVisitor.visitVarInsn(ILOAD, 1);
            methodVisitor.visitInsn(IXOR);
            methodVisitor.visitVarInsn(ISTORE, 2);
            methodVisitor.visitLabel(label2);
            methodVisitor.visitVarInsn(ILOAD, 0);
            methodVisitor.visitInsn(ICONST_1);
            methodVisitor.visitInsn(ISHR);
            methodVisitor.visitVarInsn(ISTORE, 0);
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitVarInsn(ISTORE, 4);
            methodVisitor.visitVarInsn(ILOAD, 1);
            methodVisitor.visitIntInsn(SIPUSH, 128);
            methodVisitor.visitInsn(IAND);
            Label label3 = new Label();
            methodVisitor.visitJumpInsn(IFEQ, label3);
            methodVisitor.visitIntInsn(SIPUSH, 283);
            methodVisitor.visitVarInsn(ISTORE, 4);
            methodVisitor.visitLabel(label3);
            methodVisitor.visitVarInsn(ILOAD, 1);
            methodVisitor.visitInsn(ICONST_1);
            methodVisitor.visitInsn(ISHL);
            methodVisitor.visitVarInsn(ILOAD, 4);
            methodVisitor.visitInsn(IXOR);
            methodVisitor.visitVarInsn(ISTORE, 1);
            methodVisitor.visitIincInsn(3, 1);
            methodVisitor.visitJumpInsn(GOTO, label0);
            methodVisitor.visitLabel(label1);
            methodVisitor.visitVarInsn(ILOAD, 2);
            methodVisitor.visitInsn(IRETURN);
            methodVisitor.visitMaxs(2, 5);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(ACC_PUBLIC | ACC_STATIC, memberNames.invMixColumnsMethodName, "([[I)V", null, null);
            methodVisitor.visitCode();
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitVarInsn(ISTORE, 1);
            Label label0 = new Label();
            methodVisitor.visitLabel(label0);
            methodVisitor.visitVarInsn(ILOAD, 1);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitInsn(AALOAD);
            methodVisitor.visitInsn(ARRAYLENGTH);
            Label label1 = new Label();
            methodVisitor.visitJumpInsn(IF_ICMPGE, label1);
            methodVisitor.visitFieldInsn(GETSTATIC, memberNames.decryptorClassName, memberNames.mcTablesFieldName, "[[I");
            methodVisitor.visitIntInsn(BIPUSH, 14);
            methodVisitor.visitInsn(AALOAD);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitInsn(AALOAD);
            methodVisitor.visitVarInsn(ILOAD, 1);
            methodVisitor.visitInsn(IALOAD);
            methodVisitor.visitInsn(IALOAD);
            methodVisitor.visitFieldInsn(GETSTATIC, memberNames.decryptorClassName, memberNames.mcTablesFieldName, "[[I");
            methodVisitor.visitIntInsn(BIPUSH, 11);
            methodVisitor.visitInsn(AALOAD);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitInsn(ICONST_1);
            methodVisitor.visitInsn(AALOAD);
            methodVisitor.visitVarInsn(ILOAD, 1);
            methodVisitor.visitInsn(IALOAD);
            methodVisitor.visitInsn(IALOAD);
            methodVisitor.visitInsn(IXOR);
            methodVisitor.visitFieldInsn(GETSTATIC, memberNames.decryptorClassName, memberNames.mcTablesFieldName, "[[I");
            methodVisitor.visitIntInsn(BIPUSH, 13);
            methodVisitor.visitInsn(AALOAD);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitInsn(ICONST_2);
            methodVisitor.visitInsn(AALOAD);
            methodVisitor.visitVarInsn(ILOAD, 1);
            methodVisitor.visitInsn(IALOAD);
            methodVisitor.visitInsn(IALOAD);
            methodVisitor.visitInsn(IXOR);
            methodVisitor.visitFieldInsn(GETSTATIC, memberNames.decryptorClassName, memberNames.mcTablesFieldName, "[[I");
            methodVisitor.visitIntInsn(BIPUSH, 9);
            methodVisitor.visitInsn(AALOAD);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitInsn(ICONST_3);
            methodVisitor.visitInsn(AALOAD);
            methodVisitor.visitVarInsn(ILOAD, 1);
            methodVisitor.visitInsn(IALOAD);
            methodVisitor.visitInsn(IALOAD);
            methodVisitor.visitInsn(IXOR);
            methodVisitor.visitVarInsn(ISTORE, 2);
            methodVisitor.visitFieldInsn(GETSTATIC, memberNames.decryptorClassName, memberNames.mcTablesFieldName, "[[I");
            methodVisitor.visitIntInsn(BIPUSH, 9);
            methodVisitor.visitInsn(AALOAD);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitInsn(AALOAD);
            methodVisitor.visitVarInsn(ILOAD, 1);
            methodVisitor.visitInsn(IALOAD);
            methodVisitor.visitInsn(IALOAD);
            methodVisitor.visitFieldInsn(GETSTATIC, memberNames.decryptorClassName, memberNames.mcTablesFieldName, "[[I");
            methodVisitor.visitIntInsn(BIPUSH, 14);
            methodVisitor.visitInsn(AALOAD);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitInsn(ICONST_1);
            methodVisitor.visitInsn(AALOAD);
            methodVisitor.visitVarInsn(ILOAD, 1);
            methodVisitor.visitInsn(IALOAD);
            methodVisitor.visitInsn(IALOAD);
            methodVisitor.visitInsn(IXOR);
            methodVisitor.visitFieldInsn(GETSTATIC, memberNames.decryptorClassName, memberNames.mcTablesFieldName, "[[I");
            methodVisitor.visitIntInsn(BIPUSH, 11);
            methodVisitor.visitInsn(AALOAD);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitInsn(ICONST_2);
            methodVisitor.visitInsn(AALOAD);
            methodVisitor.visitVarInsn(ILOAD, 1);
            methodVisitor.visitInsn(IALOAD);
            methodVisitor.visitInsn(IALOAD);
            methodVisitor.visitInsn(IXOR);
            methodVisitor.visitFieldInsn(GETSTATIC, memberNames.decryptorClassName, memberNames.mcTablesFieldName, "[[I");
            methodVisitor.visitIntInsn(BIPUSH, 13);
            methodVisitor.visitInsn(AALOAD);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitInsn(ICONST_3);
            methodVisitor.visitInsn(AALOAD);
            methodVisitor.visitVarInsn(ILOAD, 1);
            methodVisitor.visitInsn(IALOAD);
            methodVisitor.visitInsn(IALOAD);
            methodVisitor.visitInsn(IXOR);
            methodVisitor.visitVarInsn(ISTORE, 3);
            methodVisitor.visitFieldInsn(GETSTATIC, memberNames.decryptorClassName, memberNames.mcTablesFieldName, "[[I");
            methodVisitor.visitIntInsn(BIPUSH, 13);
            methodVisitor.visitInsn(AALOAD);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitInsn(AALOAD);
            methodVisitor.visitVarInsn(ILOAD, 1);
            methodVisitor.visitInsn(IALOAD);
            methodVisitor.visitInsn(IALOAD);
            methodVisitor.visitFieldInsn(GETSTATIC, memberNames.decryptorClassName, memberNames.mcTablesFieldName, "[[I");
            methodVisitor.visitIntInsn(BIPUSH, 9);
            methodVisitor.visitInsn(AALOAD);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitInsn(ICONST_1);
            methodVisitor.visitInsn(AALOAD);
            methodVisitor.visitVarInsn(ILOAD, 1);
            methodVisitor.visitInsn(IALOAD);
            methodVisitor.visitInsn(IALOAD);
            methodVisitor.visitInsn(IXOR);
            methodVisitor.visitFieldInsn(GETSTATIC, memberNames.decryptorClassName, memberNames.mcTablesFieldName, "[[I");
            methodVisitor.visitIntInsn(BIPUSH, 14);
            methodVisitor.visitInsn(AALOAD);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitInsn(ICONST_2);
            methodVisitor.visitInsn(AALOAD);
            methodVisitor.visitVarInsn(ILOAD, 1);
            methodVisitor.visitInsn(IALOAD);
            methodVisitor.visitInsn(IALOAD);
            methodVisitor.visitInsn(IXOR);
            methodVisitor.visitFieldInsn(GETSTATIC, memberNames.decryptorClassName, memberNames.mcTablesFieldName, "[[I");
            methodVisitor.visitIntInsn(BIPUSH, 11);
            methodVisitor.visitInsn(AALOAD);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitInsn(ICONST_3);
            methodVisitor.visitInsn(AALOAD);
            methodVisitor.visitVarInsn(ILOAD, 1);
            methodVisitor.visitInsn(IALOAD);
            methodVisitor.visitInsn(IALOAD);
            methodVisitor.visitInsn(IXOR);
            methodVisitor.visitVarInsn(ISTORE, 4);
            methodVisitor.visitFieldInsn(GETSTATIC, memberNames.decryptorClassName, memberNames.mcTablesFieldName, "[[I");
            methodVisitor.visitIntInsn(BIPUSH, 11);
            methodVisitor.visitInsn(AALOAD);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitInsn(AALOAD);
            methodVisitor.visitVarInsn(ILOAD, 1);
            methodVisitor.visitInsn(IALOAD);
            methodVisitor.visitInsn(IALOAD);
            methodVisitor.visitFieldInsn(GETSTATIC, memberNames.decryptorClassName, memberNames.mcTablesFieldName, "[[I");
            methodVisitor.visitIntInsn(BIPUSH, 13);
            methodVisitor.visitInsn(AALOAD);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitInsn(ICONST_1);
            methodVisitor.visitInsn(AALOAD);
            methodVisitor.visitVarInsn(ILOAD, 1);
            methodVisitor.visitInsn(IALOAD);
            methodVisitor.visitInsn(IALOAD);
            methodVisitor.visitInsn(IXOR);
            methodVisitor.visitFieldInsn(GETSTATIC, memberNames.decryptorClassName, memberNames.mcTablesFieldName, "[[I");
            methodVisitor.visitIntInsn(BIPUSH, 9);
            methodVisitor.visitInsn(AALOAD);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitInsn(ICONST_2);
            methodVisitor.visitInsn(AALOAD);
            methodVisitor.visitVarInsn(ILOAD, 1);
            methodVisitor.visitInsn(IALOAD);
            methodVisitor.visitInsn(IALOAD);
            methodVisitor.visitInsn(IXOR);
            methodVisitor.visitFieldInsn(GETSTATIC, memberNames.decryptorClassName, memberNames.mcTablesFieldName, "[[I");
            methodVisitor.visitIntInsn(BIPUSH, 14);
            methodVisitor.visitInsn(AALOAD);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitInsn(ICONST_3);
            methodVisitor.visitInsn(AALOAD);
            methodVisitor.visitVarInsn(ILOAD, 1);
            methodVisitor.visitInsn(IALOAD);
            methodVisitor.visitInsn(IALOAD);
            methodVisitor.visitInsn(IXOR);
            methodVisitor.visitVarInsn(ISTORE, 5);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitInsn(AALOAD);
            methodVisitor.visitVarInsn(ILOAD, 1);
            methodVisitor.visitVarInsn(ILOAD, 2);
            methodVisitor.visitInsn(IASTORE);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitInsn(ICONST_1);
            methodVisitor.visitInsn(AALOAD);
            methodVisitor.visitVarInsn(ILOAD, 1);
            methodVisitor.visitVarInsn(ILOAD, 3);
            methodVisitor.visitInsn(IASTORE);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitInsn(ICONST_2);
            methodVisitor.visitInsn(AALOAD);
            methodVisitor.visitVarInsn(ILOAD, 1);
            methodVisitor.visitVarInsn(ILOAD, 4);
            methodVisitor.visitInsn(IASTORE);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitInsn(ICONST_3);
            methodVisitor.visitInsn(AALOAD);
            methodVisitor.visitVarInsn(ILOAD, 1);
            methodVisitor.visitVarInsn(ILOAD, 5);
            methodVisitor.visitInsn(IASTORE);
            methodVisitor.visitIincInsn(1, 1);
            methodVisitor.visitJumpInsn(GOTO, label0);
            methodVisitor.visitLabel(label1);
            methodVisitor.visitInsn(RETURN);
            methodVisitor.visitMaxs(4, 6);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(ACC_PUBLIC | ACC_STATIC, memberNames.invCipherMethodName, "([[I)V", null, null);
            methodVisitor.visitCode();
            methodVisitor.visitIntInsn(BIPUSH, 10);
            methodVisitor.visitVarInsn(ISTORE, 1);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitVarInsn(ILOAD, 1);
            methodVisitor.visitMethodInsn(INVOKESTATIC, memberNames.decryptorClassName, memberNames.addRoundKeyMethodName, "([[II)V", false);
            methodVisitor.visitIntInsn(BIPUSH, 9);
            methodVisitor.visitVarInsn(ISTORE, 1);
            Label label0 = new Label();
            methodVisitor.visitLabel(label0);
            methodVisitor.visitVarInsn(ILOAD, 1);
            Label label1 = new Label();
            methodVisitor.visitJumpInsn(IFLE, label1);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitMethodInsn(INVOKESTATIC, memberNames.decryptorClassName, memberNames.invShiftRowsMethodName, "([[I)V", false);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitMethodInsn(INVOKESTATIC, memberNames.decryptorClassName, memberNames.invSubBytesMethodName, "([[I)V", false);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitVarInsn(ILOAD, 1);
            methodVisitor.visitMethodInsn(INVOKESTATIC, memberNames.decryptorClassName, memberNames.addRoundKeyMethodName, "([[II)V", false);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitMethodInsn(INVOKESTATIC, memberNames.decryptorClassName, memberNames.invMixColumnsMethodName, "([[I)V", false);
            methodVisitor.visitIincInsn(1, -1);
            methodVisitor.visitJumpInsn(GOTO, label0);
            methodVisitor.visitLabel(label1);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitMethodInsn(INVOKESTATIC, memberNames.decryptorClassName, memberNames.invSubBytesMethodName, "([[I)V", false);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitMethodInsn(INVOKESTATIC, memberNames.decryptorClassName, memberNames.invShiftRowsMethodName, "([[I)V", false);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitVarInsn(ILOAD, 1);
            methodVisitor.visitMethodInsn(INVOKESTATIC, memberNames.decryptorClassName, memberNames.addRoundKeyMethodName, "([[II)V", false);
            methodVisitor.visitInsn(RETURN);
            methodVisitor.visitMaxs(2, 2);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(ACC_PUBLIC | ACC_STATIC, memberNames.decryptMethodName, "(Ljava/lang/String;[J)Ljava/lang/String;", null, null);
            methodVisitor.visitCode();
            methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/Thread", "currentThread", "()Ljava/lang/Thread;", false);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Thread", "getStackTrace", "()[Ljava/lang/StackTraceElement;", false);
            methodVisitor.visitVarInsn(ASTORE, 2);
            methodVisitor.visitInsn(ICONST_4);
            methodVisitor.visitIntInsn(NEWARRAY, T_INT);
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitVarInsn(ALOAD, 2);
            methodVisitor.visitInsn(ICONST_1);
            methodVisitor.visitInsn(AALOAD);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StackTraceElement", "getClassName", "()Ljava/lang/String;", false);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "hashCode", "()I", false);
            methodVisitor.visitInsn(IASTORE);
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitInsn(ICONST_1);
            methodVisitor.visitVarInsn(ALOAD, 2);
            methodVisitor.visitInsn(ICONST_1);
            methodVisitor.visitInsn(AALOAD);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StackTraceElement", "getMethodName", "()Ljava/lang/String;", false);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "hashCode", "()I", false);
            methodVisitor.visitInsn(IASTORE);
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitInsn(ICONST_2);
            methodVisitor.visitVarInsn(ALOAD, 2);
            methodVisitor.visitInsn(ICONST_2);
            methodVisitor.visitInsn(AALOAD);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StackTraceElement", "getClassName", "()Ljava/lang/String;", false);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "hashCode", "()I", false);
            methodVisitor.visitInsn(IASTORE);
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitInsn(ICONST_3);
            methodVisitor.visitVarInsn(ALOAD, 2);
            methodVisitor.visitInsn(ICONST_2);
            methodVisitor.visitInsn(AALOAD);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StackTraceElement", "getMethodName", "()Ljava/lang/String;", false);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "hashCode", "()I", false);
            methodVisitor.visitInsn(IASTORE);
            methodVisitor.visitVarInsn(ASTORE, 3);
            methodVisitor.visitVarInsn(ALOAD, 3);
            methodVisitor.visitMethodInsn(INVOKESTATIC, memberNames.decryptorClassName, memberNames.keyScheduleMethodName, "([I)V", false);
            methodVisitor.visitIntInsn(BIPUSH, 16);
            methodVisitor.visitIntInsn(NEWARRAY, T_INT);
            methodVisitor.visitVarInsn(ASTORE, 4);
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitVarInsn(ISTORE, 5);
            Label label0 = new Label();
            methodVisitor.visitLabel(label0);
            methodVisitor.visitVarInsn(ILOAD, 5);
            methodVisitor.visitVarInsn(ALOAD, 1);
            methodVisitor.visitInsn(ARRAYLENGTH);
            Label label1 = new Label();
            methodVisitor.visitJumpInsn(IF_ICMPGE, label1);
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitVarInsn(ISTORE, 6);
            Label label2 = new Label();
            methodVisitor.visitLabel(label2);
            methodVisitor.visitVarInsn(ILOAD, 6);
            methodVisitor.visitIntInsn(BIPUSH, 8);
            Label label3 = new Label();
            methodVisitor.visitJumpInsn(IF_ICMPGE, label3);
            methodVisitor.visitVarInsn(ALOAD, 4);
            methodVisitor.visitVarInsn(ILOAD, 5);
            methodVisitor.visitIntInsn(BIPUSH, 8);
            methodVisitor.visitInsn(IMUL);
            methodVisitor.visitVarInsn(ILOAD, 6);
            methodVisitor.visitInsn(IADD);
            methodVisitor.visitVarInsn(ALOAD, 1);
            methodVisitor.visitVarInsn(ILOAD, 5);
            methodVisitor.visitInsn(LALOAD);
            methodVisitor.visitIntInsn(BIPUSH, 56);
            methodVisitor.visitVarInsn(ILOAD, 6);
            methodVisitor.visitIntInsn(BIPUSH, 8);
            methodVisitor.visitInsn(IMUL);
            methodVisitor.visitInsn(ISUB);
            methodVisitor.visitInsn(LUSHR);
            methodVisitor.visitLdcInsn(255L);
            methodVisitor.visitInsn(LAND);
            methodVisitor.visitInsn(L2I);
            methodVisitor.visitInsn(IASTORE);
            methodVisitor.visitIincInsn(6, 1);
            methodVisitor.visitJumpInsn(GOTO, label2);
            methodVisitor.visitLabel(label3);
            methodVisitor.visitIincInsn(5, 1);
            methodVisitor.visitJumpInsn(GOTO, label0);
            methodVisitor.visitLabel(label1);
            methodVisitor.visitVarInsn(ALOAD, 4);
            methodVisitor.visitMethodInsn(INVOKESTATIC, memberNames.decryptorClassName, memberNames.createStateMethodName, "([I)[[I", false);
            methodVisitor.visitVarInsn(ASTORE, 5);
            methodVisitor.visitMethodInsn(INVOKESTATIC, "java/util/Base64", "getDecoder", "()Ljava/util/Base64$Decoder;", false);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitMethodInsn(INVOKEVIRTUAL, "java/util/Base64$Decoder", "decode", "(Ljava/lang/String;)[B", false);
            methodVisitor.visitMethodInsn(INVOKESTATIC, memberNames.decryptorClassName, memberNames.designMethodName, "([B)[I", false);
            methodVisitor.visitVarInsn(ASTORE, 6);
            methodVisitor.visitVarInsn(ALOAD, 6);
            methodVisitor.visitInsn(ARRAYLENGTH);
            methodVisitor.visitIntInsn(BIPUSH, 16);
            methodVisitor.visitInsn(IDIV);
            methodVisitor.visitTypeInsn(ANEWARRAY, "[[I");
            methodVisitor.visitVarInsn(ASTORE, 7);
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitVarInsn(ISTORE, 8);
            Label label4 = new Label();
            methodVisitor.visitLabel(label4);
            methodVisitor.visitVarInsn(ILOAD, 8);
            methodVisitor.visitVarInsn(ALOAD, 7);
            methodVisitor.visitInsn(ARRAYLENGTH);
            Label label5 = new Label();
            methodVisitor.visitJumpInsn(IF_ICMPGE, label5);
            methodVisitor.visitVarInsn(ALOAD, 6);
            methodVisitor.visitVarInsn(ILOAD, 8);
            methodVisitor.visitIntInsn(BIPUSH, 16);
            methodVisitor.visitInsn(IMUL);
            methodVisitor.visitVarInsn(ILOAD, 8);
            methodVisitor.visitInsn(ICONST_1);
            methodVisitor.visitInsn(IADD);
            methodVisitor.visitIntInsn(BIPUSH, 16);
            methodVisitor.visitInsn(IMUL);
            methodVisitor.visitMethodInsn(INVOKESTATIC, "java/util/Arrays", "copyOfRange", "([III)[I", false);
            methodVisitor.visitVarInsn(ASTORE, 9);
            methodVisitor.visitVarInsn(ALOAD, 7);
            methodVisitor.visitVarInsn(ILOAD, 8);
            methodVisitor.visitVarInsn(ALOAD, 9);
            methodVisitor.visitMethodInsn(INVOKESTATIC, memberNames.decryptorClassName, memberNames.createStateMethodName, "([I)[[I", false);
            methodVisitor.visitInsn(AASTORE);
            methodVisitor.visitIincInsn(8, 1);
            methodVisitor.visitJumpInsn(GOTO, label4);
            methodVisitor.visitLabel(label5);
            methodVisitor.visitVarInsn(ALOAD, 7);
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitInsn(AALOAD);
            methodVisitor.visitMethodInsn(INVOKESTATIC, memberNames.decryptorClassName, memberNames.copyBlockMethodName, "([[I)[[I", false);
            methodVisitor.visitVarInsn(ASTORE, 8);
            methodVisitor.visitVarInsn(ALOAD, 7);
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitInsn(AALOAD);
            methodVisitor.visitMethodInsn(INVOKESTATIC, memberNames.decryptorClassName, memberNames.invCipherMethodName, "([[I)V", false);
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitVarInsn(ISTORE, 9);
            Label label6 = new Label();
            methodVisitor.visitLabel(label6);
            methodVisitor.visitVarInsn(ILOAD, 9);
            methodVisitor.visitVarInsn(ALOAD, 7);
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitInsn(AALOAD);
            methodVisitor.visitInsn(ARRAYLENGTH);
            Label label7 = new Label();
            methodVisitor.visitJumpInsn(IF_ICMPGE, label7);
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitVarInsn(ISTORE, 10);
            Label label8 = new Label();
            methodVisitor.visitLabel(label8);
            methodVisitor.visitVarInsn(ILOAD, 10);
            methodVisitor.visitVarInsn(ALOAD, 7);
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitInsn(AALOAD);
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitInsn(AALOAD);
            methodVisitor.visitInsn(ARRAYLENGTH);
            Label label9 = new Label();
            methodVisitor.visitJumpInsn(IF_ICMPGE, label9);
            methodVisitor.visitVarInsn(ALOAD, 7);
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitInsn(AALOAD);
            methodVisitor.visitVarInsn(ILOAD, 9);
            methodVisitor.visitInsn(AALOAD);
            methodVisitor.visitVarInsn(ILOAD, 10);
            methodVisitor.visitInsn(DUP2);
            methodVisitor.visitInsn(IALOAD);
            methodVisitor.visitVarInsn(ALOAD, 5);
            methodVisitor.visitVarInsn(ILOAD, 9);
            methodVisitor.visitInsn(AALOAD);
            methodVisitor.visitVarInsn(ILOAD, 10);
            methodVisitor.visitInsn(IALOAD);
            methodVisitor.visitInsn(IXOR);
            methodVisitor.visitInsn(IASTORE);
            methodVisitor.visitVarInsn(ALOAD, 8);
            methodVisitor.visitVarInsn(ILOAD, 9);
            methodVisitor.visitInsn(AALOAD);
            methodVisitor.visitVarInsn(ILOAD, 10);
            methodVisitor.visitInsn(DUP2);
            methodVisitor.visitInsn(IALOAD);
            methodVisitor.visitVarInsn(ALOAD, 7);
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitInsn(AALOAD);
            methodVisitor.visitVarInsn(ILOAD, 9);
            methodVisitor.visitInsn(AALOAD);
            methodVisitor.visitVarInsn(ILOAD, 10);
            methodVisitor.visitInsn(IALOAD);
            methodVisitor.visitInsn(IXOR);
            methodVisitor.visitInsn(IASTORE);
            methodVisitor.visitIincInsn(10, 1);
            methodVisitor.visitJumpInsn(GOTO, label8);
            methodVisitor.visitLabel(label9);
            methodVisitor.visitIincInsn(9, 1);
            methodVisitor.visitJumpInsn(GOTO, label6);
            methodVisitor.visitLabel(label7);
            methodVisitor.visitInsn(ICONST_1);
            methodVisitor.visitVarInsn(ISTORE, 9);
            Label label10 = new Label();
            methodVisitor.visitLabel(label10);
            methodVisitor.visitVarInsn(ILOAD, 9);
            methodVisitor.visitVarInsn(ALOAD, 7);
            methodVisitor.visitInsn(ARRAYLENGTH);
            Label label11 = new Label();
            methodVisitor.visitJumpInsn(IF_ICMPGE, label11);
            methodVisitor.visitVarInsn(ALOAD, 7);
            methodVisitor.visitVarInsn(ILOAD, 9);
            methodVisitor.visitInsn(AALOAD);
            methodVisitor.visitMethodInsn(INVOKESTATIC, memberNames.decryptorClassName, memberNames.copyBlockMethodName, "([[I)[[I", false);
            methodVisitor.visitVarInsn(ASTORE, 10);
            methodVisitor.visitVarInsn(ALOAD, 7);
            methodVisitor.visitVarInsn(ILOAD, 9);
            methodVisitor.visitInsn(AALOAD);
            methodVisitor.visitMethodInsn(INVOKESTATIC, memberNames.decryptorClassName, memberNames.invCipherMethodName, "([[I)V", false);
            methodVisitor.visitVarInsn(ALOAD, 7);
            methodVisitor.visitVarInsn(ILOAD, 9);
            methodVisitor.visitInsn(AALOAD);
            methodVisitor.visitVarInsn(ASTORE, 11);
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitVarInsn(ISTORE, 12);
            Label label12 = new Label();
            methodVisitor.visitLabel(label12);
            methodVisitor.visitVarInsn(ILOAD, 12);
            methodVisitor.visitVarInsn(ALOAD, 11);
            methodVisitor.visitInsn(ARRAYLENGTH);
            Label label13 = new Label();
            methodVisitor.visitJumpInsn(IF_ICMPGE, label13);
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitVarInsn(ISTORE, 13);
            Label label14 = new Label();
            methodVisitor.visitLabel(label14);
            methodVisitor.visitVarInsn(ILOAD, 13);
            methodVisitor.visitVarInsn(ALOAD, 11);
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitInsn(AALOAD);
            methodVisitor.visitInsn(ARRAYLENGTH);
            Label label15 = new Label();
            methodVisitor.visitJumpInsn(IF_ICMPGE, label15);
            methodVisitor.visitVarInsn(ALOAD, 11);
            methodVisitor.visitVarInsn(ILOAD, 12);
            methodVisitor.visitInsn(AALOAD);
            methodVisitor.visitVarInsn(ILOAD, 13);
            methodVisitor.visitInsn(DUP2);
            methodVisitor.visitInsn(IALOAD);
            methodVisitor.visitVarInsn(ALOAD, 8);
            methodVisitor.visitVarInsn(ILOAD, 12);
            methodVisitor.visitInsn(AALOAD);
            methodVisitor.visitVarInsn(ILOAD, 13);
            methodVisitor.visitInsn(IALOAD);
            methodVisitor.visitInsn(IXOR);
            methodVisitor.visitInsn(IASTORE);
            methodVisitor.visitVarInsn(ALOAD, 10);
            methodVisitor.visitVarInsn(ILOAD, 12);
            methodVisitor.visitInsn(AALOAD);
            methodVisitor.visitVarInsn(ILOAD, 13);
            methodVisitor.visitInsn(DUP2);
            methodVisitor.visitInsn(IALOAD);
            methodVisitor.visitVarInsn(ALOAD, 11);
            methodVisitor.visitVarInsn(ILOAD, 12);
            methodVisitor.visitInsn(AALOAD);
            methodVisitor.visitVarInsn(ILOAD, 13);
            methodVisitor.visitInsn(IALOAD);
            methodVisitor.visitInsn(IXOR);
            methodVisitor.visitInsn(IASTORE);
            methodVisitor.visitIincInsn(13, 1);
            methodVisitor.visitJumpInsn(GOTO, label14);
            methodVisitor.visitLabel(label15);
            methodVisitor.visitIincInsn(12, 1);
            methodVisitor.visitJumpInsn(GOTO, label12);
            methodVisitor.visitLabel(label13);
            methodVisitor.visitVarInsn(ALOAD, 10);
            methodVisitor.visitVarInsn(ASTORE, 8);
            methodVisitor.visitIincInsn(9, 1);
            methodVisitor.visitJumpInsn(GOTO, label10);
            methodVisitor.visitLabel(label11);
            methodVisitor.visitVarInsn(ALOAD, 6);
            methodVisitor.visitInsn(ARRAYLENGTH);
            methodVisitor.visitIntInsn(NEWARRAY, T_BYTE);
            methodVisitor.visitVarInsn(ASTORE, 9);
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitVarInsn(ISTORE, 10);
            Label label16 = new Label();
            methodVisitor.visitLabel(label16);
            methodVisitor.visitVarInsn(ILOAD, 10);
            methodVisitor.visitVarInsn(ALOAD, 7);
            methodVisitor.visitInsn(ARRAYLENGTH);
            Label label17 = new Label();
            methodVisitor.visitJumpInsn(IF_ICMPGE, label17);
            methodVisitor.visitIntInsn(BIPUSH, 16);
            methodVisitor.visitIntInsn(NEWARRAY, T_INT);
            methodVisitor.visitVarInsn(ASTORE, 11);
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitVarInsn(ISTORE, 12);
            Label label18 = new Label();
            methodVisitor.visitLabel(label18);
            methodVisitor.visitVarInsn(ILOAD, 12);
            methodVisitor.visitVarInsn(ALOAD, 7);
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitInsn(AALOAD);
            methodVisitor.visitInsn(ARRAYLENGTH);
            Label label19 = new Label();
            methodVisitor.visitJumpInsn(IF_ICMPGE, label19);
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitVarInsn(ISTORE, 13);
            Label label20 = new Label();
            methodVisitor.visitLabel(label20);
            methodVisitor.visitVarInsn(ILOAD, 13);
            methodVisitor.visitVarInsn(ALOAD, 7);
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitInsn(AALOAD);
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitInsn(AALOAD);
            methodVisitor.visitInsn(ARRAYLENGTH);
            Label label21 = new Label();
            methodVisitor.visitJumpInsn(IF_ICMPGE, label21);
            methodVisitor.visitVarInsn(ALOAD, 11);
            methodVisitor.visitVarInsn(ILOAD, 12);
            methodVisitor.visitInsn(ICONST_4);
            methodVisitor.visitInsn(IMUL);
            methodVisitor.visitVarInsn(ILOAD, 13);
            methodVisitor.visitInsn(IADD);
            methodVisitor.visitVarInsn(ALOAD, 7);
            methodVisitor.visitVarInsn(ILOAD, 10);
            methodVisitor.visitInsn(AALOAD);
            methodVisitor.visitVarInsn(ILOAD, 13);
            methodVisitor.visitInsn(AALOAD);
            methodVisitor.visitVarInsn(ILOAD, 12);
            methodVisitor.visitInsn(IALOAD);
            methodVisitor.visitInsn(IASTORE);
            methodVisitor.visitIincInsn(13, 1);
            methodVisitor.visitJumpInsn(GOTO, label20);
            methodVisitor.visitLabel(label21);
            methodVisitor.visitIincInsn(12, 1);
            methodVisitor.visitJumpInsn(GOTO, label18);
            methodVisitor.visitLabel(label19);
            methodVisitor.visitVarInsn(ALOAD, 11);
            methodVisitor.visitMethodInsn(INVOKESTATIC, memberNames.decryptorClassName, memberNames.resignMethodName, "([I)[B", false);
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitVarInsn(ALOAD, 9);
            methodVisitor.visitVarInsn(ILOAD, 10);
            methodVisitor.visitIntInsn(BIPUSH, 16);
            methodVisitor.visitInsn(IMUL);
            methodVisitor.visitVarInsn(ALOAD, 11);
            methodVisitor.visitInsn(ARRAYLENGTH);
            methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/System", "arraycopy", "(Ljava/lang/Object;ILjava/lang/Object;II)V", false);
            methodVisitor.visitIincInsn(10, 1);
            methodVisitor.visitJumpInsn(GOTO, label16);
            methodVisitor.visitLabel(label17);
            methodVisitor.visitVarInsn(ALOAD, 9);
            methodVisitor.visitVarInsn(ALOAD, 9);
            methodVisitor.visitInsn(ARRAYLENGTH);
            methodVisitor.visitInsn(ICONST_1);
            methodVisitor.visitInsn(ISUB);
            methodVisitor.visitInsn(BALOAD);
            methodVisitor.visitVarInsn(ISTORE, 10);
            methodVisitor.visitVarInsn(ALOAD, 9);
            methodVisitor.visitInsn(ARRAYLENGTH);
            methodVisitor.visitVarInsn(ILOAD, 10);
            methodVisitor.visitInsn(ISUB);
            methodVisitor.visitIntInsn(NEWARRAY, T_BYTE);
            methodVisitor.visitVarInsn(ASTORE, 11);
            methodVisitor.visitVarInsn(ALOAD, 9);
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitVarInsn(ALOAD, 11);
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitVarInsn(ALOAD, 11);
            methodVisitor.visitInsn(ARRAYLENGTH);
            methodVisitor.visitMethodInsn(INVOKESTATIC, "java/lang/System", "arraycopy", "(Ljava/lang/Object;ILjava/lang/Object;II)V", false);
            methodVisitor.visitTypeInsn(NEW, "java/lang/String");
            methodVisitor.visitInsn(DUP);
            methodVisitor.visitVarInsn(ALOAD, 11);
            methodVisitor.visitFieldInsn(GETSTATIC, "java/nio/charset/StandardCharsets", "UTF_8", "Ljava/nio/charset/Charset;");
            methodVisitor.visitMethodInsn(INVOKESPECIAL, "java/lang/String", "<init>", "([BLjava/nio/charset/Charset;)V", false);
            methodVisitor.visitInsn(ARETURN);
            methodVisitor.visitMaxs(7, 14);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(ACC_PUBLIC | ACC_STATIC, memberNames.copyBlockMethodName, "([[I)[[I", null, null);
            methodVisitor.visitCode();
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitInsn(ARRAYLENGTH);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitInsn(AALOAD);
            methodVisitor.visitInsn(ARRAYLENGTH);
            methodVisitor.visitMultiANewArrayInsn("[[I", 2);
            methodVisitor.visitVarInsn(ASTORE, 1);
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitVarInsn(ISTORE, 2);
            Label label0 = new Label();
            methodVisitor.visitLabel(label0);
            methodVisitor.visitVarInsn(ILOAD, 2);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitInsn(ARRAYLENGTH);
            Label label1 = new Label();
            methodVisitor.visitJumpInsn(IF_ICMPGE, label1);
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitVarInsn(ISTORE, 3);
            Label label2 = new Label();
            methodVisitor.visitLabel(label2);
            methodVisitor.visitVarInsn(ILOAD, 3);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitInsn(AALOAD);
            methodVisitor.visitInsn(ARRAYLENGTH);
            Label label3 = new Label();
            methodVisitor.visitJumpInsn(IF_ICMPGE, label3);
            methodVisitor.visitVarInsn(ALOAD, 1);
            methodVisitor.visitVarInsn(ILOAD, 2);
            methodVisitor.visitInsn(AALOAD);
            methodVisitor.visitVarInsn(ILOAD, 3);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitVarInsn(ILOAD, 2);
            methodVisitor.visitInsn(AALOAD);
            methodVisitor.visitVarInsn(ILOAD, 3);
            methodVisitor.visitInsn(IALOAD);
            methodVisitor.visitInsn(IASTORE);
            methodVisitor.visitIincInsn(3, 1);
            methodVisitor.visitJumpInsn(GOTO, label2);
            methodVisitor.visitLabel(label3);
            methodVisitor.visitIincInsn(2, 1);
            methodVisitor.visitJumpInsn(GOTO, label0);
            methodVisitor.visitLabel(label1);
            methodVisitor.visitVarInsn(ALOAD, 1);
            methodVisitor.visitInsn(ARETURN);
            methodVisitor.visitMaxs(4, 4);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(ACC_PUBLIC | ACC_STATIC, memberNames.designMethodName, "([B)[I", null, null);
            methodVisitor.visitCode();
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitInsn(ARRAYLENGTH);
            methodVisitor.visitIntInsn(NEWARRAY, T_INT);
            methodVisitor.visitVarInsn(ASTORE, 1);
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitVarInsn(ISTORE, 2);
            Label label0 = new Label();
            methodVisitor.visitLabel(label0);
            methodVisitor.visitVarInsn(ILOAD, 2);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitInsn(ARRAYLENGTH);
            Label label1 = new Label();
            methodVisitor.visitJumpInsn(IF_ICMPGE, label1);
            methodVisitor.visitVarInsn(ALOAD, 1);
            methodVisitor.visitVarInsn(ILOAD, 2);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitVarInsn(ILOAD, 2);
            methodVisitor.visitInsn(BALOAD);
            methodVisitor.visitIntInsn(SIPUSH, 255);
            methodVisitor.visitInsn(IAND);
            methodVisitor.visitInsn(IASTORE);
            methodVisitor.visitIincInsn(2, 1);
            methodVisitor.visitJumpInsn(GOTO, label0);
            methodVisitor.visitLabel(label1);
            methodVisitor.visitVarInsn(ALOAD, 1);
            methodVisitor.visitInsn(ARETURN);
            methodVisitor.visitMaxs(4, 3);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(ACC_PUBLIC | ACC_STATIC, memberNames.resignMethodName, "([I)[B", null, null);
            methodVisitor.visitCode();
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitInsn(ARRAYLENGTH);
            methodVisitor.visitIntInsn(NEWARRAY, T_BYTE);
            methodVisitor.visitVarInsn(ASTORE, 1);
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitVarInsn(ISTORE, 2);
            Label label0 = new Label();
            methodVisitor.visitLabel(label0);
            methodVisitor.visitVarInsn(ILOAD, 2);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitInsn(ARRAYLENGTH);
            Label label1 = new Label();
            methodVisitor.visitJumpInsn(IF_ICMPGE, label1);
            methodVisitor.visitVarInsn(ALOAD, 1);
            methodVisitor.visitVarInsn(ILOAD, 2);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitVarInsn(ILOAD, 2);
            methodVisitor.visitInsn(IALOAD);
            methodVisitor.visitInsn(I2B);
            methodVisitor.visitInsn(BASTORE);
            methodVisitor.visitIincInsn(2, 1);
            methodVisitor.visitJumpInsn(GOTO, label0);
            methodVisitor.visitLabel(label1);
            methodVisitor.visitVarInsn(ALOAD, 1);
            methodVisitor.visitInsn(ARETURN);
            methodVisitor.visitMaxs(4, 3);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(ACC_PUBLIC | ACC_STATIC, memberNames.createStateMethodName, "([I)[[I", null, null);
            methodVisitor.visitCode();
            methodVisitor.visitInsn(ICONST_4);
            methodVisitor.visitInsn(ICONST_4);
            methodVisitor.visitMultiANewArrayInsn("[[I", 2);
            methodVisitor.visitVarInsn(ASTORE, 1);
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitVarInsn(ISTORE, 2);
            Label label0 = new Label();
            methodVisitor.visitLabel(label0);
            methodVisitor.visitVarInsn(ILOAD, 2);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitInsn(ARRAYLENGTH);
            Label label1 = new Label();
            methodVisitor.visitJumpInsn(IF_ICMPGE, label1);
            methodVisitor.visitVarInsn(ALOAD, 1);
            methodVisitor.visitVarInsn(ILOAD, 2);
            methodVisitor.visitInsn(ICONST_4);
            methodVisitor.visitInsn(IREM);
            methodVisitor.visitInsn(AALOAD);
            methodVisitor.visitVarInsn(ILOAD, 2);
            methodVisitor.visitInsn(ICONST_4);
            methodVisitor.visitInsn(IDIV);
            methodVisitor.visitVarInsn(ALOAD, 0);
            methodVisitor.visitVarInsn(ILOAD, 2);
            methodVisitor.visitInsn(IALOAD);
            methodVisitor.visitInsn(IASTORE);
            methodVisitor.visitIincInsn(2, 1);
            methodVisitor.visitJumpInsn(GOTO, label0);
            methodVisitor.visitLabel(label1);
            methodVisitor.visitVarInsn(ALOAD, 1);
            methodVisitor.visitInsn(ARETURN);
            methodVisitor.visitMaxs(4, 3);
            methodVisitor.visitEnd();
        }
        {
            methodVisitor = classWriter.visitMethod(ACC_STATIC, "<clinit>", "()V", null, null);
            methodVisitor.visitCode();
            methodVisitor.visitIntInsn(BIPUSH, 16);
            methodVisitor.visitIntInsn(BIPUSH, 16);
            methodVisitor.visitMultiANewArrayInsn("[[I", 2);
            methodVisitor.visitFieldInsn(PUTSTATIC, memberNames.decryptorClassName, memberNames.sboxFieldName, "[[I");
            methodVisitor.visitInsn(ICONST_1);
            methodVisitor.visitVarInsn(ISTORE, 0);
            methodVisitor.visitInsn(ICONST_1);
            methodVisitor.visitVarInsn(ISTORE, 1);
            Label label0 = new Label();
            methodVisitor.visitLabel(label0);
            methodVisitor.visitInsn(ICONST_3);
            methodVisitor.visitVarInsn(ILOAD, 0);
            methodVisitor.visitMethodInsn(INVOKESTATIC, memberNames.decryptorClassName, memberNames.gfMultMethodName, "(II)I", false);
            methodVisitor.visitVarInsn(ISTORE, 0);
            methodVisitor.visitIntInsn(SIPUSH, 246);
            methodVisitor.visitVarInsn(ILOAD, 1);
            methodVisitor.visitMethodInsn(INVOKESTATIC, memberNames.decryptorClassName, memberNames.gfMultMethodName, "(II)I", false);
            methodVisitor.visitVarInsn(ISTORE, 1);
            methodVisitor.visitVarInsn(ILOAD, 1);
            methodVisitor.visitVarInsn(ISTORE, 2);
            methodVisitor.visitVarInsn(ILOAD, 2);
            methodVisitor.visitVarInsn(ILOAD, 1);
            methodVisitor.visitInsn(ICONST_1);
            methodVisitor.visitInsn(ISHL);
            methodVisitor.visitVarInsn(ILOAD, 1);
            methodVisitor.visitIntInsn(BIPUSH, 7);
            methodVisitor.visitInsn(IUSHR);
            methodVisitor.visitInsn(IOR);
            methodVisitor.visitIntInsn(SIPUSH, 255);
            methodVisitor.visitInsn(IAND);
            methodVisitor.visitInsn(IXOR);
            methodVisitor.visitVarInsn(ISTORE, 2);
            methodVisitor.visitVarInsn(ILOAD, 2);
            methodVisitor.visitVarInsn(ILOAD, 1);
            methodVisitor.visitInsn(ICONST_2);
            methodVisitor.visitInsn(ISHL);
            methodVisitor.visitVarInsn(ILOAD, 1);
            methodVisitor.visitIntInsn(BIPUSH, 6);
            methodVisitor.visitInsn(IUSHR);
            methodVisitor.visitInsn(IOR);
            methodVisitor.visitIntInsn(SIPUSH, 255);
            methodVisitor.visitInsn(IAND);
            methodVisitor.visitInsn(IXOR);
            methodVisitor.visitVarInsn(ISTORE, 2);
            methodVisitor.visitVarInsn(ILOAD, 2);
            methodVisitor.visitVarInsn(ILOAD, 1);
            methodVisitor.visitInsn(ICONST_3);
            methodVisitor.visitInsn(ISHL);
            methodVisitor.visitVarInsn(ILOAD, 1);
            methodVisitor.visitInsn(ICONST_5);
            methodVisitor.visitInsn(IUSHR);
            methodVisitor.visitInsn(IOR);
            methodVisitor.visitIntInsn(SIPUSH, 255);
            methodVisitor.visitInsn(IAND);
            methodVisitor.visitInsn(IXOR);
            methodVisitor.visitVarInsn(ISTORE, 2);
            methodVisitor.visitVarInsn(ILOAD, 2);
            methodVisitor.visitVarInsn(ILOAD, 1);
            methodVisitor.visitInsn(ICONST_4);
            methodVisitor.visitInsn(ISHL);
            methodVisitor.visitVarInsn(ILOAD, 1);
            methodVisitor.visitInsn(ICONST_4);
            methodVisitor.visitInsn(IUSHR);
            methodVisitor.visitInsn(IOR);
            methodVisitor.visitIntInsn(SIPUSH, 255);
            methodVisitor.visitInsn(IAND);
            methodVisitor.visitInsn(IXOR);
            methodVisitor.visitVarInsn(ISTORE, 2);
            methodVisitor.visitFieldInsn(GETSTATIC, memberNames.decryptorClassName, memberNames.sboxFieldName, "[[I");
            methodVisitor.visitVarInsn(ILOAD, 0);
            methodVisitor.visitIntInsn(BIPUSH, 16);
            methodVisitor.visitInsn(IDIV);
            methodVisitor.visitInsn(AALOAD);
            methodVisitor.visitVarInsn(ILOAD, 0);
            methodVisitor.visitIntInsn(BIPUSH, 16);
            methodVisitor.visitInsn(IREM);
            methodVisitor.visitVarInsn(ILOAD, 2);
            methodVisitor.visitIntInsn(BIPUSH, 99);
            methodVisitor.visitInsn(IXOR);
            methodVisitor.visitIntInsn(SIPUSH, 255);
            methodVisitor.visitInsn(IAND);
            methodVisitor.visitInsn(IASTORE);
            methodVisitor.visitVarInsn(ILOAD, 0);
            methodVisitor.visitInsn(ICONST_1);
            methodVisitor.visitJumpInsn(IF_ICMPNE, label0);
            methodVisitor.visitFieldInsn(GETSTATIC, memberNames.decryptorClassName, memberNames.sboxFieldName, "[[I");
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitInsn(AALOAD);
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitIntInsn(BIPUSH, 99);
            methodVisitor.visitInsn(IASTORE);
            methodVisitor.visitFieldInsn(GETSTATIC, memberNames.decryptorClassName, memberNames.sboxFieldName, "[[I");
            methodVisitor.visitInsn(ARRAYLENGTH);
            methodVisitor.visitFieldInsn(GETSTATIC, memberNames.decryptorClassName, memberNames.sboxFieldName, "[[I");
            methodVisitor.visitInsn(ARRAYLENGTH);
            methodVisitor.visitMultiANewArrayInsn("[[I", 2);
            methodVisitor.visitFieldInsn(PUTSTATIC, memberNames.decryptorClassName, memberNames.invSBoxFieldName, "[[I");
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitVarInsn(ISTORE, 2);
            Label label1 = new Label();
            methodVisitor.visitLabel(label1);
            methodVisitor.visitVarInsn(ILOAD, 2);
            methodVisitor.visitFieldInsn(GETSTATIC, memberNames.decryptorClassName, memberNames.sboxFieldName, "[[I");
            methodVisitor.visitInsn(ARRAYLENGTH);
            Label label2 = new Label();
            methodVisitor.visitJumpInsn(IF_ICMPGE, label2);
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitVarInsn(ISTORE, 3);
            Label label3 = new Label();
            methodVisitor.visitLabel(label3);
            methodVisitor.visitVarInsn(ILOAD, 3);
            methodVisitor.visitFieldInsn(GETSTATIC, memberNames.decryptorClassName, memberNames.sboxFieldName, "[[I");
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitInsn(AALOAD);
            methodVisitor.visitInsn(ARRAYLENGTH);
            Label label4 = new Label();
            methodVisitor.visitJumpInsn(IF_ICMPGE, label4);
            methodVisitor.visitFieldInsn(GETSTATIC, memberNames.decryptorClassName, memberNames.sboxFieldName, "[[I");
            methodVisitor.visitVarInsn(ILOAD, 2);
            methodVisitor.visitInsn(AALOAD);
            methodVisitor.visitVarInsn(ILOAD, 3);
            methodVisitor.visitInsn(IALOAD);
            methodVisitor.visitVarInsn(ISTORE, 4);
            methodVisitor.visitFieldInsn(GETSTATIC, memberNames.decryptorClassName, memberNames.invSBoxFieldName, "[[I");
            methodVisitor.visitVarInsn(ILOAD, 4);
            methodVisitor.visitInsn(ICONST_4);
            methodVisitor.visitInsn(ISHR);
            methodVisitor.visitInsn(AALOAD);
            methodVisitor.visitVarInsn(ILOAD, 4);
            methodVisitor.visitIntInsn(BIPUSH, 15);
            methodVisitor.visitInsn(IAND);
            methodVisitor.visitVarInsn(ILOAD, 2);
            methodVisitor.visitInsn(ICONST_4);
            methodVisitor.visitInsn(ISHL);
            methodVisitor.visitVarInsn(ILOAD, 3);
            methodVisitor.visitInsn(IOR);
            methodVisitor.visitInsn(IASTORE);
            methodVisitor.visitIincInsn(3, 1);
            methodVisitor.visitJumpInsn(GOTO, label3);
            methodVisitor.visitLabel(label4);
            methodVisitor.visitIincInsn(2, 1);
            methodVisitor.visitJumpInsn(GOTO, label1);
            methodVisitor.visitLabel(label2);
            methodVisitor.visitIntInsn(BIPUSH, 10);
            methodVisitor.visitIntInsn(NEWARRAY, T_INT);
            methodVisitor.visitFieldInsn(PUTSTATIC, memberNames.decryptorClassName, memberNames.rconFieldName, "[I");
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitVarInsn(ISTORE, 2);
            Label label5 = new Label();
            methodVisitor.visitLabel(label5);
            methodVisitor.visitVarInsn(ILOAD, 2);
            methodVisitor.visitFieldInsn(GETSTATIC, memberNames.decryptorClassName, memberNames.rconFieldName, "[I");
            methodVisitor.visitInsn(ARRAYLENGTH);
            Label label6 = new Label();
            methodVisitor.visitJumpInsn(IF_ICMPGE, label6);
            methodVisitor.visitVarInsn(ILOAD, 2);
            Label label7 = new Label();
            methodVisitor.visitJumpInsn(IFNE, label7);
            methodVisitor.visitFieldInsn(GETSTATIC, memberNames.decryptorClassName, memberNames.rconFieldName, "[I");
            methodVisitor.visitVarInsn(ILOAD, 2);
            methodVisitor.visitInsn(ICONST_1);
            methodVisitor.visitInsn(IASTORE);
            Label label8 = new Label();
            methodVisitor.visitJumpInsn(GOTO, label8);
            methodVisitor.visitLabel(label7);
            methodVisitor.visitFieldInsn(GETSTATIC, memberNames.decryptorClassName, memberNames.rconFieldName, "[I");
            methodVisitor.visitVarInsn(ILOAD, 2);
            methodVisitor.visitInsn(ICONST_1);
            methodVisitor.visitInsn(ISUB);
            methodVisitor.visitInsn(IALOAD);
            methodVisitor.visitIntInsn(SIPUSH, 128);
            Label label9 = new Label();
            methodVisitor.visitJumpInsn(IF_ICMPGE, label9);
            methodVisitor.visitFieldInsn(GETSTATIC, memberNames.decryptorClassName, memberNames.rconFieldName, "[I");
            methodVisitor.visitVarInsn(ILOAD, 2);
            methodVisitor.visitInsn(ICONST_2);
            methodVisitor.visitFieldInsn(GETSTATIC, memberNames.decryptorClassName, memberNames.rconFieldName, "[I");
            methodVisitor.visitVarInsn(ILOAD, 2);
            methodVisitor.visitInsn(ICONST_1);
            methodVisitor.visitInsn(ISUB);
            methodVisitor.visitInsn(IALOAD);
            methodVisitor.visitInsn(IMUL);
            methodVisitor.visitInsn(IASTORE);
            methodVisitor.visitJumpInsn(GOTO, label8);
            methodVisitor.visitLabel(label9);
            methodVisitor.visitFieldInsn(GETSTATIC, memberNames.decryptorClassName, memberNames.rconFieldName, "[I");
            methodVisitor.visitVarInsn(ILOAD, 2);
            methodVisitor.visitInsn(ICONST_1);
            methodVisitor.visitInsn(ISUB);
            methodVisitor.visitInsn(IALOAD);
            methodVisitor.visitIntInsn(SIPUSH, 128);
            methodVisitor.visitJumpInsn(IF_ICMPLT, label8);
            methodVisitor.visitFieldInsn(GETSTATIC, memberNames.decryptorClassName, memberNames.rconFieldName, "[I");
            methodVisitor.visitVarInsn(ILOAD, 2);
            methodVisitor.visitInsn(ICONST_2);
            methodVisitor.visitFieldInsn(GETSTATIC, memberNames.decryptorClassName, memberNames.rconFieldName, "[I");
            methodVisitor.visitVarInsn(ILOAD, 2);
            methodVisitor.visitInsn(ICONST_1);
            methodVisitor.visitInsn(ISUB);
            methodVisitor.visitInsn(IALOAD);
            methodVisitor.visitInsn(IMUL);
            methodVisitor.visitIntInsn(SIPUSH, 283);
            methodVisitor.visitInsn(IXOR);
            methodVisitor.visitInsn(IASTORE);
            methodVisitor.visitLabel(label8);
            methodVisitor.visitIincInsn(2, 1);
            methodVisitor.visitJumpInsn(GOTO, label5);
            methodVisitor.visitLabel(label6);
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitVarInsn(ISTORE, 2);
            Label label10 = new Label();
            methodVisitor.visitLabel(label10);
            methodVisitor.visitVarInsn(ILOAD, 2);
            methodVisitor.visitFieldInsn(GETSTATIC, memberNames.decryptorClassName, memberNames.rconFieldName, "[I");
            methodVisitor.visitInsn(ARRAYLENGTH);
            Label label11 = new Label();
            methodVisitor.visitJumpInsn(IF_ICMPGE, label11);
            methodVisitor.visitFieldInsn(GETSTATIC, memberNames.decryptorClassName, memberNames.rconFieldName, "[I");
            methodVisitor.visitVarInsn(ILOAD, 2);
            methodVisitor.visitInsn(DUP2);
            methodVisitor.visitInsn(IALOAD);
            methodVisitor.visitIntInsn(BIPUSH, 24);
            methodVisitor.visitInsn(ISHL);
            methodVisitor.visitInsn(IASTORE);
            methodVisitor.visitIincInsn(2, 1);
            methodVisitor.visitJumpInsn(GOTO, label10);
            methodVisitor.visitLabel(label11);
            methodVisitor.visitIntInsn(BIPUSH, 15);
            methodVisitor.visitTypeInsn(ANEWARRAY, "[I");
            methodVisitor.visitFieldInsn(PUTSTATIC, memberNames.decryptorClassName, memberNames.mcTablesFieldName, "[[I");
            methodVisitor.visitFieldInsn(GETSTATIC, memberNames.decryptorClassName, memberNames.mcTablesFieldName, "[[I");
            methodVisitor.visitIntInsn(BIPUSH, 14);
            methodVisitor.visitIntInsn(SIPUSH, 256);
            methodVisitor.visitIntInsn(NEWARRAY, T_INT);
            methodVisitor.visitInsn(AASTORE);
            methodVisitor.visitFieldInsn(GETSTATIC, memberNames.decryptorClassName, memberNames.mcTablesFieldName, "[[I");
            methodVisitor.visitIntInsn(BIPUSH, 11);
            methodVisitor.visitIntInsn(SIPUSH, 256);
            methodVisitor.visitIntInsn(NEWARRAY, T_INT);
            methodVisitor.visitInsn(AASTORE);
            methodVisitor.visitFieldInsn(GETSTATIC, memberNames.decryptorClassName, memberNames.mcTablesFieldName, "[[I");
            methodVisitor.visitIntInsn(BIPUSH, 13);
            methodVisitor.visitIntInsn(SIPUSH, 256);
            methodVisitor.visitIntInsn(NEWARRAY, T_INT);
            methodVisitor.visitInsn(AASTORE);
            methodVisitor.visitFieldInsn(GETSTATIC, memberNames.decryptorClassName, memberNames.mcTablesFieldName, "[[I");
            methodVisitor.visitIntInsn(BIPUSH, 9);
            methodVisitor.visitIntInsn(SIPUSH, 256);
            methodVisitor.visitIntInsn(NEWARRAY, T_INT);
            methodVisitor.visitInsn(AASTORE);
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitVarInsn(ISTORE, 2);
            Label label12 = new Label();
            methodVisitor.visitLabel(label12);
            methodVisitor.visitVarInsn(ILOAD, 2);
            methodVisitor.visitFieldInsn(GETSTATIC, memberNames.decryptorClassName, memberNames.mcTablesFieldName, "[[I");
            methodVisitor.visitInsn(ARRAYLENGTH);
            Label label13 = new Label();
            methodVisitor.visitJumpInsn(IF_ICMPGE, label13);
            methodVisitor.visitFieldInsn(GETSTATIC, memberNames.decryptorClassName, memberNames.mcTablesFieldName, "[[I");
            methodVisitor.visitVarInsn(ILOAD, 2);
            methodVisitor.visitInsn(AALOAD);
            Label label14 = new Label();
            methodVisitor.visitJumpInsn(IFNULL, label14);
            methodVisitor.visitFieldInsn(GETSTATIC, memberNames.decryptorClassName, memberNames.mcTablesFieldName, "[[I");
            methodVisitor.visitVarInsn(ILOAD, 2);
            methodVisitor.visitInsn(AALOAD);
            methodVisitor.visitVarInsn(ASTORE, 3);
            methodVisitor.visitInsn(ICONST_0);
            methodVisitor.visitVarInsn(ISTORE, 4);
            Label label15 = new Label();
            methodVisitor.visitLabel(label15);
            methodVisitor.visitVarInsn(ILOAD, 4);
            methodVisitor.visitVarInsn(ALOAD, 3);
            methodVisitor.visitInsn(ARRAYLENGTH);
            methodVisitor.visitJumpInsn(IF_ICMPGE, label14);
            methodVisitor.visitVarInsn(ALOAD, 3);
            methodVisitor.visitVarInsn(ILOAD, 4);
            methodVisitor.visitVarInsn(ILOAD, 2);
            methodVisitor.visitVarInsn(ILOAD, 4);
            methodVisitor.visitMethodInsn(INVOKESTATIC, memberNames.decryptorClassName, memberNames.gfMultMethodName, "(II)I", false);
            methodVisitor.visitInsn(IASTORE);
            methodVisitor.visitIincInsn(4, 1);
            methodVisitor.visitJumpInsn(GOTO, label15);
            methodVisitor.visitLabel(label14);
            methodVisitor.visitIincInsn(2, 1);
            methodVisitor.visitJumpInsn(GOTO, label12);
            methodVisitor.visitLabel(label13);
            methodVisitor.visitInsn(RETURN);
            methodVisitor.visitMaxs(6, 5);
            methodVisitor.visitEnd();
        }
        classWriter.visitEnd();

        return classWriter;
    }
}
